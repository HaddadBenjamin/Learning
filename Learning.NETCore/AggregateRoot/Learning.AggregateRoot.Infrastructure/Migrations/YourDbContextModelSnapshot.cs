// <auto-generated />
using System;
using Learning.AggregateRoot.Infrastructure.Example.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Learning.AggregateRoot.Infrastructure.Migrations
{
    [DbContext(typeof(YourDbContext))]
    partial class YourDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Learning.AggregateRoot.Domain.AuditCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateRootName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImpersonatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AggregateRootName");

                    b.HasIndex("Command");

                    b.HasIndex("CommandName");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("Date");

                    b.HasIndex("Id");

                    b.HasIndex("ImpersonatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditCommands");
                });

            modelBuilder.Entity("Learning.AggregateRoot.Domain.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ImpersonatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("Date");

                    b.HasIndex("Event");

                    b.HasIndex("EventName");

                    b.HasIndex("Id");

                    b.HasIndex("ImpersonatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditEvents");
                });

            modelBuilder.Entity("Learning.AggregateRoot.Domain.Example.Aggregate.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedOnBehalfOf")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastUpdatedOnBehalfOf")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Learning.AggregateRoot.Domain.Example.Aggregate.ItemLocation", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId", "Id");

                    b.HasIndex("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("Id", "ItemId");

                    b.ToTable("ItemLocation");
                });

            modelBuilder.Entity("Learning.AggregateRoot.Domain.Example.Aggregate.ItemLocation", b =>
                {
                    b.HasOne("Learning.AggregateRoot.Domain.Example.Aggregate.Item", "Item")
                        .WithMany("Locations")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
